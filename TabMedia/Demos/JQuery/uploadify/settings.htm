<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title></title>
</head>
<body>

    <h2>
        <br />
        <b>Settings</b></h2>
    <table border="0" cellspacing="0" class="documentation">
        <tr>
            <td valign="top" width="138">
                <strong>uploader</strong></td>
            <td valign="top" width="498">
                <p>
                    The relative path to the uploadify.swf file.
                    <br />
                    For absolute paths prefix the path with either ‘/’ or ‘http’</p>
                <p>
                    Default = ‘uploadify.swf’<br />
                </p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>script</strong></td>
            <td valign="top" width="498">
                <p>
                    The relative path to the backend script that will be processing your uploaded 
                    files.<br />
                    For absolute paths prefix the path with either ‘/’ or ‘http’<br />
                    Default = ‘uploadify.php’<strong>
                    <br />
                    </strong>
                </p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>checkScript</strong></td>
            <td valign="top" width="498">
                <p>
                    The relative path to the backend script that will check if the file selected 
                    already resides on the server.<br />
                    No Default. ‘check.php’ is provided with core files.<br />
                </p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>scriptData</strong></td>
            <td valign="top" width="498">
                <p>
                    An object containing name/value pairs of additional information you would like 
                    sent to the upload script. {‘name’: ‘value’}<br />
                </p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>fileDataName</strong></td>
            <td valign="top" width="498">
                <p>
                    The name of your files array in the upload server script.<br />
                    Default = ‘Filedata’</p>
            </td>
        </tr>
        <tr>
            <td>
                <strong>method<br />
                <span style="color: red;">New</span></strong></td>
            <td>
                <p>
                    Set the method for sending scriptData to the backend script. Either ‘GET’ or 
                    ‘POST’. Default is set to ‘POST’.</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>scriptAccess</strong></td>
            <td valign="top" width="498">
                <p>
                    The<strong> </strong>access mode for scripts in the flash file. If you are 
                    testing locally, set to ‘always’.<br />
                    Default = ’sameDomain’<strong> </strong>
                </p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>folder</strong></td>
            <td valign="top" width="498">
                <p>
                    The path to the folder you would like to save the files to. Do not end the path 
                    with a ‘/’.<br />
                    For absolute paths prefix the path with either ‘/’ or ‘http’. Note server 
                    security issues with trying to upload to remote destinations.</p>
            </td>
        </tr>
        <tr>
            <td>
                <strong>queueID<br />
                <span style="color: red;">New</span></strong></td>
            <td>
                <p>
                    The ID of the element you want to use as your file queue. By default, one is 
                    created on the fly below the ‘Browse’ button.</p>
            </td>
        </tr>
        <tr>
            <td>
                <strong>queueSizeLimit<br />
                <span style="color: red;">New</span></strong></td>
            <td>
                <p>
                    The limit of the number of items that can be in the queue at one time. Default = 
                    999.</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>multi</strong></td>
            <td valign="top" width="498">
                <p>
                    Set to <strong>true</strong> if you want to allow multiple file uploads.</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>auto</strong></td>
            <td valign="top" width="498">
                <p>
                    Set to <strong>true</strong> if you would like the files to be uploaded when 
                    they are selected.</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>fileDesc</strong></td>
            <td valign="top" width="498">
                <p>
                    The text that will appear in the file type drop down at the bottom of the browse 
                    dialog box.<strong> </strong>
                </p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>fileExt</strong></td>
            <td valign="top" width="498">
                <p>
                    A list of file extensions you would like to allow for upload. Format like 
                    ‘*.ext1;*.ext2;*.ext3′.
                    <br />
                    <span style="color: red;">fileDesc is required when using this option.</span></p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>sizeLimit</strong></td>
            <td valign="top" width="498">
                <p>
                    A number representing the limit in bytes for each upload.</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>simUploadLimit<br />
                <span style="color: red;">changed</span></strong></td>
            <td valign="top" width="498">
                <p>
                    A limit to the number of simultaneous uploads you would like to allow.<br />
                    Default: 1</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>buttonText</strong></td>
            <td valign="top" width="498">
                <p>
                    The text you would like to appear on the default button. Default = ‘BROWSE’</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>buttonImg</strong></td>
            <td valign="top" width="498">
                <p>
                    The path to the image you will be using for the browse button.</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>hideButton</strong></td>
            <td valign="top" width="498">
                <p>
                    Set to <strong>true</strong> if you want to hide the button image.</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>rollover</strong></td>
            <td valign="top" width="498">
                <p>
                    Set to <strong>true</strong> if you would like to activate rollover states for 
                    your browse button. To prepare your browse button for rollover states, simple 
                    add the ‘over’ and ‘press’ states below the normal state in a single file.</p>
                <p>
                    *Mouseover events are inconsistent in Flash 9 so you may see a short lag when 
                    using the rollover option.</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>width</strong></td>
            <td valign="top" width="498">
                <p>
                    The width of the button image / flash file. Default = 30</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>height</strong></td>
            <td valign="top" width="498">
                <p>
                    The height of the button image / flash file. If <strong>rollover</strong> is set 
                    to <strong>true</strong>, this should be 1/3 the height of the actual file. 
                    Default = 110</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>wmode</strong></td>
            <td valign="top" width="498">
                <p>
                    Set to <strong>transparent</strong> to make the background of the flash file 
                    transparent. If set to <strong>transparent</strong>, the flash file will be at 
                    the top-most layer of the page. By omitting the <strong>buttonImg</strong> 
                    option and setting <strong>wmode</strong> to <strong>transparent</strong>, the 
                    entire flash file will be transparent, allowing you layer content below it or 
                    style the button using CSS. Default = ‘opaque’</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>cancelImg</strong></td>
            <td valign="top" width="498">
                <p>
                    The path to the default cancel image. Default = ‘cancel.png’</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>onInit</strong></td>
            <td valign="top" width="498">
                <p>
                    A function that triggers when the script is loaded. The default event handler 
                    hides the targeted element on the page and replaces it with the flash file, then 
                    creates a queue container after it. The default function will not trigger if the 
                    value of your custom function returns <strong>false</strong>. For custom 
                    functions, you can access the html for the flash file using the variable <strong>
                    flashElement</strong>.</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>onSelect</strong></td>
            <td valign="top" width="498">
                <p>
                    A function that triggers for each element selected. The default event handler 
                    generates a 6 character random string as the unique identifier for the file item 
                    and creates a file queue item for the file. The default event handler will not 
                    trigger if the value of your custom function returns <strong>false</strong>.</p>
                <p>
                    Three arguments are passed to the function:<br />
                    <strong>event:</strong> The event object.<br />
                    <strong>queueID: </strong>The unique identifier of the file that was selected.<br />
                    <strong>fileObj:</strong> An object containing details about the file that was 
                    selected.</p>
                <ul>
                    <li><strong>name</strong> – The name of the file<strong> </strong></li>
                    <li><strong>size</strong> – The size in bytes of the file<strong> </strong></li>
                    <li><strong>creationDate</strong> – The date the file was created<strong> </strong>
                    </li>
                    <li><strong>modificationDate</strong> – The last date the file was modified<strong>
                        </strong></li>
                    <li><strong>type</strong> – The file extension beginning with a ‘.’<strong> </strong>
                    </li>
                </ul>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>onSelectOnce</strong></td>
            <td valign="top" width="498">
                A function that triggers once for each select operation. There is no default 
                event handler.
                <p>
                    <br class="spacer_" />
                </p>
                <p>
                    <br class="spacer_" />
                </p>
                <p>
                    <br class="spacer_" />
                </p>
                <p>
                    <br class="spacer_" />
                </p>
                <p>
                    <br class="spacer_" />
                </p>
                <p>
                    <br class="spacer_" />
                </p>
                <p>
                    Two arguments are sent to the function:<br />
                    <strong>event:</strong> The event object.<br />
                    <strong>data:</strong> An object containing details about the select operation.</p>
                <ul>
                    <li><strong>fileCount</strong> – The total number of files in the queue<strong>
                        </strong></li>
                    <li><strong>filesSelected</strong> – The number of files selected in the select 
                        operation<strong> </strong></li>
                    <li><strong>filesReplaced</strong> – The number of files that were replaced in the 
                        queue<strong> </strong></li>
                    <li><strong>allBytesTotal</strong> – The total number of bytes for all files in the 
                        queue<strong> </strong></li>
                </ul>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>onCancel</strong></td>
            <td valign="top" width="498">
                <p>
                    A function that triggers when a file upload is cancelled or removed from the 
                    queue. The default event handler removes the file from the upload queue. The 
                    default event handler will not trigger if the value of your custom function 
                    returns <strong>false</strong>.</p>
                <p>
                    Four arguments are sent to the function:<br />
                    <strong>event:</strong> The event object.<br />
                    <strong>queueID: </strong>The unique identifier of the file that was cancelled.<br />
                    <strong>fileObj:</strong> An object containing details about the file that was 
                    selected.</p>
                <ul>
                    <li><strong>name</strong> – The name of the file<strong> </strong></li>
                    <li><strong>size</strong> – The size in bytes of the file<strong> </strong></li>
                    <li><strong>creationDate</strong> – The date the file was created<strong> </strong>
                    </li>
                    <li><strong>modificationDate</strong> – The last date the file was modified<strong>
                        </strong></li>
                    <li><strong>type</strong> – The file extension beginning with a ‘.’<strong> </strong>
                    </li>
                </ul>
                <p>
                    <strong>data:</strong> Details about the file queue.</p>
                <ul>
                    <li><strong>fileCount</strong> – The total number of files left in the queue<strong>
                        </strong></li>
                    <li><strong>allBytesTotal</strong> – The total number of bytes left for all files in 
                        the queue</li>
                </ul>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>onClearQueue</strong></td>
            <td valign="top" width="498">
                <p>
                    A function that triggers when the <strong>fileUploadClearQueue</strong> function 
                    is called. The default event handler removes all queue items from the upload 
                    queue. The default event handler will not trigger if the value of your custom 
                    function returns <strong>false</strong>.</p>
                <p>
                    Two arguments are sent to the function:<br />
                    <strong>event:</strong> The event object.<br />
                    <strong>data:</strong> An object containing details about the file queue.</p>
                <ul>
                    <li><strong>fileCount </strong>– The number of files remaining in the upload queue</li>
                    <li><strong>allBytesTotal </strong>– The number of bytes remaining in the upload 
                        queue</li>
                </ul>
            </td>
        </tr>
        <tr>
            <td valign="top">
                <strong>onQueueFull<br />
                <span style="color: red;">New</span></strong></td>
            <td>
                <p>
                    A function that triggers when the file queue has reached maximum capacity. The 
                    default event alerts the user of the queue size.</p>
                <p>
                    Two arguments are sent to the function:<br />
                    <strong>event: </strong>The event object.<br />
                    <strong>queueSizeLimit: </strong>The maximum size of the queue.</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>onError<br />
                <span style="color: red;">Changed</span></strong></td>
            <td valign="top" width="498">
                <p>
                    A function that triggers when an error occurs during the upload process. The 
                    default event handler attaches an error message to the queue item returning the 
                    error and changes it’s queue item container to red.</p>
                <p>
                    Four arguments are sent to the function:<br />
                    <strong>event:</strong> The event object.<br />
                    <strong>queueID: </strong>The unique identifier of the file that returned an 
                    error.<br />
                    <strong>fileObj:</strong> An object containing details about the file that was 
                    selected.</p>
                <ul>
                    <li><strong>name</strong> – The name of the file<strong> </strong></li>
                    <li><strong>size</strong> – The size in bytes of the file<strong> </strong></li>
                    <li><strong>creationDate</strong> – The date the file was created<strong> </strong>
                    </li>
                    <li><strong>modificationDate</strong> – The last date the file was modified<strong>
                        </strong></li>
                    <li><strong>type</strong> – The file extension beginning with a ‘.’<strong> </strong>
                    </li>
                </ul>
                <p>
                    <strong>errorObj: </strong>An object containing details about the error 
                    returned.</p>
                <ul>
                    <li><strong>type</strong> – Either ‘HTTP’, ‘IO’, or ‘Security’<strong> </strong>
                    </li>
                    <li><strong>info</strong> – An error message describing the type of error returned<strong>
                        </strong></li>
                </ul>
            </td>
        </tr>
        <tr>
            <td valign="top">
                <strong>onOpen</strong><br />
                <span style="color: rgb(255, 0, 0);"><strong>new</strong></span></td>
            <td>
                <p>
                    A function that fires each time a file is initially opened for uploading by the 
                    Flash file.&nbsp; There is no defualt function.</p>
                <p>
                    Three arguments are sent to the function:<br />
                    <strong>event: </strong>The event object.<br />
                    <strong>queueID:</strong> The unique identifier of the file that was opened.<br />
                    <strong>fileObj: </strong>An object containing details about the file that was 
                    selected.</p>
                <ul>
                    <li><strong>name</strong> – The name of the file<strong> </strong></li>
                    <li><strong>size</strong> – The size in bytes of the file<strong> </strong></li>
                    <li><strong>creationDate</strong> – The date the file was created<strong> </strong>
                    </li>
                    <li><strong>modificationDate</strong> – The last date the file was modified<strong>
                        </strong></li>
                    <li><strong>type</strong> – The file extension beginning with a ‘.’</li>
                </ul>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>onProgress</strong></td>
            <td valign="top" width="498">
                <p>
                    A function that fires each time the progress of a file upload changes. The 
                    default function updates the progress bar in the file queue item. The default 
                    function will not trigger if the value of your custom function returns <strong>
                    false</strong>.</p>
                <p>
                    Four arguments are sent to function:<br />
                    <strong>event:</strong> The event object.<br />
                    <strong>queueID: </strong>The unique identifier of the file that whose progress 
                    was updated.<br />
                    <strong>fileObj:</strong> An object containing details about the file that was 
                    selected.</p>
                <ul>
                    <li><strong>name</strong> – The name of the file<strong> </strong></li>
                    <li><strong>size</strong> – The size in bytes of the file<strong> </strong></li>
                    <li><strong>creationDate</strong> – The date the file was created<strong> </strong>
                    </li>
                    <li><strong>modificationDate</strong> – The last date the file was modified<strong>
                        </strong></li>
                    <li><strong>type</strong> – The file extension beginning with a ‘.’<strong> </strong>
                    </li>
                </ul>
                <p>
                    <strong>data:</strong> An object containing details about the upload and queue.</p>
                <ul>
                    <li><strong>percentage</strong> – The current percentage completed for the upload<strong>
                        </strong></li>
                    <li><strong>bytesLoaded</strong> – The current amount of bytes uploaded<strong>
                        </strong></li>
                    <li><strong>allBytesLoaded</strong> – The current amount of bytes loaded for all 
                        files in the queue<strong> </strong></li>
                    <li><strong>speed</strong> – The current upload speed in KB/s<strong> </strong>
                    </li>
                </ul>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>onComplete</strong></td>
            <td valign="top" width="498">
                <p>
                    A function that triggers when a file upload has completed. The default function 
                    removes the file queue item from the upload queue. The default function will not 
                    trigger if the value of your custom function returns <strong>false</strong>.</p>
                <p>
                    Four arguments are sent to the function:<br />
                    <strong>event:</strong> The event object.<br />
                    <strong>queueID: </strong>The unique identifier of the file that was completed.<br />
                    <strong>fileObj:</strong> An object containing details about the file that was 
                    selected.</p>
                <ul>
                    <li><strong>name</strong> – The name of the file<strong> </strong></li>
                    <li><strong>filePath</strong> – The path on the server to the uploaded file<strong>
                        </strong></li>
                    <li><strong>size</strong> – The size in bytes of the file<strong> </strong></li>
                    <li><strong>creationDate</strong> – The date the file was created<strong> </strong>
                    </li>
                    <li><strong>modificationDate</strong> – The last date the file was modified<strong>
                        </strong></li>
                    <li><strong>type</strong> – The file extension beginning with a ‘.’<strong> </strong>
                    </li>
                </ul>
                <p>
                    <strong>response:</strong> The data sent back from the server.<br />
                    <strong>data:</strong> Details about the file queue.</p>
                <ul>
                    <li><strong>fileCount</strong> – The total number of files left in the queue<strong>
                        </strong></li>
                    <li><strong>speed</strong> – The average speed of the file upload in KB/s<strong>
                        </strong></li>
                </ul>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>onAllComplete</strong></td>
            <td valign="top" width="498">
                <p>
                    A function that triggers when all file uploads have completed. There is no 
                    default event handler.</p>
                <p>
                    Two arguments are sent to the function:<br />
                    <strong>event:</strong> The event object.<br />
                    <strong>data:</strong> An object containing details about the upload process.</p>
                <ul>
                    <li><strong>filesUploaded</strong> – The total number of files uploaded</li>
                    <li><strong>errors</strong> – The total number of errors while uploading</li>
                    <li><strong>allBytesLoaded</strong> – The total number of bytes uploaded</li>
                    <li><strong>speed</strong> – The average speed of all uploaded files</li>
                </ul>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>onCheck</strong></td>
            <td valign="top" width="498">
                <p>
                    A function that triggers when an existing file is detected on the server. The 
                    default event handler opens a confirmation box.</p>
                <p>
                    Five arguments are sent to the function:<br />
                    <strong>event:</strong> The event object.<br />
                    <strong>checkScript:</strong> The path to the file checking script.<br />
                    <strong>fileQueue: </strong>A file queue object consisting of key/value pairs 
                    with the queue ID as the key and the filename as the value.<br />
                    <strong>folder:</strong> The path to the upload folder.<br />
                    <strong>single: </strong>True if only one file is being uploaded from the queue.</p>
            </td>
        </tr>
    </table>
    <h2 class="sIFR-replaced" style="">
        <span id="sIFR_replacement_2_alternate" class="sIFR-alternate">related functions</span></h2>
    <table border="0" cellspacing="0" class="documentation">
        <tr>
            <td valign="top" width="138">
                <strong>uploadifySettings<br />
                <span style="color: red;">Changed</span></strong></td>
            <td valign="top" width="498">
                <p>
                    A function used to change options for a fileUpload object.</p>
                <p>
                    Two arguments are available, one is required:<br />
                    <strong>setting:</strong> The option to change.<br />
                    <strong>value:</strong> The value to change the option to. If left blank, this 
                    function will return the current value of the setting.</p>
                <p>
                    The following example will change the upload folder to ‘/uploads’:</p>
                <div>
                    $(‘#someID’).uploadifySettings(‘folder’,&#39;/uploads’);</div>
                <div>
                    <p>
                        The following example will return the simUploadLimit:</p>
                    <div>
                        $(‘#someID’).uploadifySettings(’simUploadLimit’);</div>
                    <p>
                        <br class="spacer_" />
                    </p>
                </div>
                <p>
                    The following options can be changed:<br />
                    buttonImg, buttonText, cancelImg, fileDesc, fileExt, width, height, folder, 
                    script, scriptData, simUploadLimit, sizeLimit, hideButton</p>
                <p>
                    The following will return the current size of the queue
                    <br />
                    #(‘#someID’).uploadifySettings(‘queueSize’);</p>
                <p>
                    When using scriptData enter it in {key1 : value1, key2 : value2, …} format.</p>
                <p>
                    #(‘#someID’).uploadifySettings(’scriptData’, {‘name’ : some.val()});</p>
                <p>
                    If the key already exists it will update it, if it doesn’t exist it will add it. 
                    You no longer need to re-write every key/value pair. When requesting scriptData 
                    it will return the key/value pairs as an object.</p>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>uploadifyUpload<br />
                <span style="color: red;">Changed</span></strong></td>
            <td valign="top" width="498">
                <p>
                    A function used to begin an upload of a single file or all files in the queue.</p>
                <p>
                    One argument is optional:<br />
                    <strong>queueID:</strong> The unqiue queue identifier for the file to upload.<br />
                    The following example will upload all files in the queue:</p>
                <div>
                    $(‘#someID’).uploadifyUpload();</div>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>uploadifyCancel<br />
                <span style="color: red;">Changed</span></strong></td>
            <td valign="top" width="498">
                <p>
                    A function used to remove a file from the queue or stop an upload in progress.</p>
                <p>
                    One argument is required.<br />
                    <strong>queueID:</strong> The unique queue identifier of the file you wish to 
                    cancel.</p>
                <p>
                    The following example will remove a file from the upload queue:</p>
                <div>
                    $(‘#someID’).uploadifyCancel(‘NFJSHS’);</div>
            </td>
        </tr>
        <tr>
            <td valign="top" width="138">
                <strong>uploadifyClearQueue<br />
                <span style="color: red;">Changed</span></strong></td>
            <td valign="top" width="498">
                <p>
                    A function used to clear all files from the upload queue.</p>
                <p>
                    The following example clears the file upload queue:</p>
                <div>
                    $(‘#someID’).uploadifyClearQueue();</div>
            </td>
        </tr>
    </table>

</body>
</html>
